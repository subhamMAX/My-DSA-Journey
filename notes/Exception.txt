ðŸ“˜ Exception Handling in Java
ðŸ”¹ What is an Exception?

Exception: An unwanted or unexpected event that disrupts the normal flow of a program.

Example:

Division by zero

File not found

Array index out of bounds

ðŸ”¹ Types of Errors

Compile-time Errors â†’ Syntax errors, missing semicolon, etc.

Runtime Errors (Exceptions) â†’ Occur during program execution.

Logical Errors â†’ Wrong output due to incorrect logic.

ðŸ”¹ Exception Hierarchy
Object
 â””â”€â”€ Throwable
      â”œâ”€â”€ Error (serious problems, not recoverable)
      â””â”€â”€ Exception
           â”œâ”€â”€ Checked Exceptions (compile-time)
           â””â”€â”€ Unchecked Exceptions (runtime)


Checked Exceptions â†’ Must be handled at compile time (e.g., IOException, SQLException).

Unchecked Exceptions â†’ Occur at runtime, not checked by compiler (e.g., ArithmeticException, NullPointerException).

ðŸ”¹ Keywords in Exception Handling

try â€“ Block of code to monitor for exceptions.

catch â€“ Handles the exception.

finally â€“ Block that always executes (cleanup code).

throw â€“ Used to explicitly throw an exception.

throws â€“ Declares exceptions a method can throw.

ðŸ”¹ Syntax
try {
    // Code that may cause exception
} catch (ExceptionType e) {
    // Handling code
} finally {
    // Always executed (optional)
}

ðŸ”¹ Example
public class Example {
    public static void main(String[] args) {
        try {
            int a = 10 / 0; // ArithmeticException
        } catch (ArithmeticException e) {
            System.out.println("Cannot divide by zero!");
        } finally {
            System.out.println("Finally block always executes.");
        }
    }
}


Output:

Cannot divide by zero!
Finally block always executes.

ðŸ”¹ Multiple Catch Blocks
try {
    int arr[] = new int[5];
    arr[6] = 10;
} catch (ArithmeticException e) {
    System.out.println("Arithmetic Error");
} catch (ArrayIndexOutOfBoundsException e) {
    System.out.println("Array Index Error");
} catch (Exception e) {
    System.out.println("General Exception");
}

ðŸ”¹ throw vs throws

throw â†’ Used to explicitly throw an exception.

throws â†’ Used in method declaration to specify exceptions.

void myMethod() throws IOException {
    throw new IOException("File error");
}

ðŸ”¹ User-defined Exception
class MyException extends Exception {
    public MyException(String msg) {
        super(msg);
    }
}

public class Test {
    public static void main(String[] args) {
        try {
            throw new MyException("Custom Exception Occurred!");
        } catch (MyException e) {
            System.out.println(e.getMessage());
        }
    }
}

ðŸ”¹ Best Practices

Donâ€™t use exceptions for normal flow control.

Always clean up resources in finally or use try-with-resources.

Catch specific exceptions instead of using a general Exception.